var sdsad = "saddxcd";
var vsd = "xcxcvdf";
var asdasd = "sdfsfvc";
var dsad = "dcxvcvcv";
var xvx = "dvcxvcsf";
var aasdsa = "sdfsdfsd";
var asdasd = "sfsdfsdf";
var asds = "jhdjspAD";
var ada = "sdfssqqq";
var cxc = "sdfsdfsd";
var vcvc = "dsdsfsfdd";
var fdsf = "sdfdsfsf";
var CryptoJS = require("crypto-js");
var a = ``
var b = adsad(a)

function sfdsf(a) {
    var _ecb = CryptoJS.mode.ECB
    var pkcs7 = CryptoJS.pad.Pkcs7.pad(asds,16)
    var gg = CryptoJS.enc.Utf8.parse(asds)
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}

function adsad(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function sdfsdfs(a) {
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function fsdcdsfc(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function asdsad(a) {
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function asdazx(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function zxcv(a) {
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function sfsdf(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function dfgdgg(a) {
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function sfsfd(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function xvxv(a) {
    console.log('message', a);
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function sdfdf(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function sfdsdfsf(a) {
    console.log('message', a);
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function sffsdf(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
function fsdfsdf(a) {
    var b = CryptoJS.AES.encrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString();
    return b
}
function dsdf(a) {
    var b = CryptoJS.AES.decrypt(a, CryptoJS.enc.Utf8.parse(asds), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    }).toString(CryptoJS.enc.Utf8);
    return b
}
module.exports = {
    encrypt: sfdsf,
    decrypt: adsad
}

